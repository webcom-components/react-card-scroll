$border-color: #ccc;
$padding: 4px;
$outMargin: -15px;
$outPadding: $padding - $outMargin;

.container {
    position: relative;
    z-index: 0;
    box-sizing: border-box;
    :global(.rcs-center), :global(.rcs-left-stack), :global(.rcs-right-stack){
        position: absolute;
        transition: left 1s cubic-bezier(0,.7,.7,1);
        box-sizing: border-box;
    }
}

@mixin arrow{
    position: fixed;
    top: 40%;
    z-index: 1;
    height: 20%;
    padding: $padding;
    border-top: $border-color solid 1px;
    border-bottom: $border-color solid 1px;
    display: flex;
    align-items: center;
    transition: margin 0.5s;
}

.rightArrow {
    @include arrow;
    background: linear-gradient(to right, white, #eee);
    right: 0;
    border-left: $border-color solid 1px;
    border-radius: 2px 0 0 2px;
    margin-right: $outMargin;
    padding-right: $outPadding;
    cursor: pointer;
    .arrow{
        &::after{
            content: ">"
        }
    }
    &:hover{
        background: linear-gradient(to right, #ddd, #ccc);
        margin-right: 0;
    }
}

.leftArrow {
    @include arrow;
    background: linear-gradient(to left, white, #eee);
    left: 0;
    border-right: $border-color solid 1px;
    border-radius: 0 2px 2px 0;
    margin-left: $outMargin;
    padding-left: $outPadding;
    .arrow{
        &::after{
            content: "<"
        }
    }
    &:hover{
        background: linear-gradient(to left, #ddd, #ccc);
        margin-left: 0;
    }
}

$grid-breakpoints: (
    // Extra small screen / phone
        xs: 0,
    // Small screen / phone
        sm: 544px,
    // Medium screen / tablet
        md: 768px,
    // Large screen / desktop
        lg: 992px,
    // Extra large screen / wide desktop
        xl: 1200px
) !default;

$grid-columns:               12 !default;
$grid-gutter-width:          1.875rem !default; // 30px

@mixin make-col-span($size, $columns: $grid-columns) {
    width: percentage($size / $columns);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    // Common properties for all breakpoints
    %grid-column {
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left: ($gutter / 2);
        padding-right: ($gutter / 2);
        width: 100%;
    }
    @each $breakpoint in map-keys($breakpoints) {
        @for $i from 1 through $columns {
            .container :global(.rcs-col-#{$breakpoint}-#{$i}) {
                @extend %grid-column;
            }
        }
        @include media-breakpoint-up($breakpoint) {
            @for $i from 1 through $columns {
                .container :global(.rcs-col-#{$breakpoint}-#{$i}) {
                    @include make-col-span($i, $columns);
                }
            }
        }
    }
}

@include make-grid-columns();
